puts
puts "ASM-Hacks"
start_time = Time.now

require 'fileutils'
FileUtils.copy_file((File.expand_path(__dir__)+ "/ROM_Original/Shiryou Sensen (J).pce"),(File.expand_path(__dir__)+ "/ROM_Patched/Shiryou Sensen (WIP).pce"))

require_relative 'common'

# Portrait move to left and down
# start
@romBytes[0xE4FC] = 0x03
# next line
@romBytes[0xE549] = 0x03
# move length to left
@romBytes[0xE545] = 0x07
# move lower
@romBytes[0xE501] = 0x16
# Move last line lower
@romBytes[0xE554] = 0x1a

# Dialogue text move to left
# start
@romBytes[0xE269] = 0x08
# next line
@romBytes[0xE318] = 0x08
# move length to left
@romBytes[0xE311] = 0x1c
# move line wiping
@romBytes[0xE3D3] = 0x08
@romBytes[0xE400] = 0x08

# Place text upper
@romBytes[0xE26E] = 0x15
# Remove second line
0.upto(2) {|i| @romBytes[0xE31F+i] = 0xea}
# Move last line upper
@romBytes[0xE326] = 0x1b

# Move name to left and make it one-liner
# move
@romBytes[0xE70E] = 0x03
@romBytes[0xE73E] = 0x03
# length
@romBytes[0xE73A] = 0x0d
# Move last line upper
@romBytes[0xE749] = 0x14

# Move MF required number in menu upper
@romBytes[0xD711] = 0x51
# replace preceeding char - COULD BE GLITCHY!
@romBytes[0x03F0C4] = 0x00

# Dialogue text blocks hack

# JSR $5FE0
@romBytes[0xE244] = 0x20
@romBytes[0xE245] = 0xe0
@romBytes[0xE246] = 0x5f

=begin
STA $28BD	0x8d,0xbd,0x28
INY			0xc8
LDA ($44),Y	0xb1,0x44
CMP $00		0xc9,0x00
BEQ 0x05	0xf0,0x05
CLC			0x18
ADC #$1F	0x69,0x1c
TAM #$08	0x53,0x08
DEY			0x88
RTS			0x60
=end

importBytes = [0x8d,0xbd,0x28,0xc8,0xb1,0x44,0xc9,0x00,0xf0,0x05,0x18,0x69,0x1f,0x53,0x08,0x88,0x60]
importBytes += Array.new(15,0xff)
0.upto(importBytes.size-1) { |i| @romBytes[i+0x0101E0] = importBytes[i] }

# Bug fixes

# Player level increment fix
# 0x5EA5 -> 0x5FD2
# JSR $5FD2
@romBytes[0xa0a5] = 0x20
@romBytes[0xa0a6] = 0xd2
@romBytes[0xa0a7] = 0x5f
# BRA -> BCC	0x90
@romBytes[0xa0a8] = 0x90
=begin
LDA $203B	;0xad,0x3b,0x20
CMP #$0A	;0xc9,0x0a
BEQ 5		;0xf0,0x05
INC $203B	;0xee,0x3b,0x20
CLC			;0x18
RTS			;0x60
LDA #$0F	;0xa9,0x0f
STA $203d	;0x8d,0x3d,0x20
SEC			;0x38
RTS			;0x60
=end
importBytes = [0xad,0x3b,0x20,0xc9,0x0a,0xf0,0x05,0xee,0x3b,0x20,0x18,0x60,0xa9,0x0f,0x8d,0x3d,0x20,0x38,0x60]
0.upto(importBytes.size-1) { |i| @romBytes[i+0xa1d2] = importBytes[i] }

# Items list > 15 fix

# BFAE
=begin
LDA #$0		;0xa9,0x00
CMP #$03	;0xc9,0x03
BEQ ->(CLC)	;0xf0,0x2f
PHY			;0x5a
ASL			;0x0a
ASL			;0x0a
TAY			;0xa8
LDA $371E,Y	;0xb9,0x1e,0x37
BEQ ->(TYA)	;0xf0,0x1f
STA $36FB	;0x8d,0xfb,0x36
TYA			;0x98
LSR			;0x4a
LSR			;0x4a
INC			;0x1a
PLY			;0x7a
CPX #$0f	;0xe0,0x0f
BEQ ->(RTS)	;0xf0,0x25
STA $36EC,X	;0x9d,0xec,0x36
INX			;0xe8
DEC $36FB	;0xce,0xfb,0x36
PHA			;0x48
LDA $36FB	;0xad,0xfb,0x36
BEQ 3		;0xf0,0x03
PLA			;0x68
BRA ->(CPX)	;0x80,0xec
PLA			;0x68
BRA ->(CMP) ;0x80,0xd4
TYA			;0x98
LSR			;0x4a
LSR			;0x4a
INC			;0x1a
PLY			;0x7a
BRA ->(CMP) ;0x80,0xcd
CLC			;0x18
CPX #$0f	;0xe0,0x0f
BCS	->(RTS)	;0xb0,06
STZ $36EC,X	;0x9e,0xec,0x36
INX			;0xe8
BRA ->(CPX)	;0x80,0xf6
RTS			;0x60
=end
importBytes = [0xa9,0x00,0xc9,0x03,0xf0,0x2f,0x5a,0x0a,0x0a,0xa8,0xb9,0x1e,0x37,0xf0,0x1f,0x8d,0xfb,0x36,0x98,0x4a,0x4a,0x1a,0x7a,0xe0,0x0f,0xf0,0x25,0x9d,0xec,0x36,0xe8,0xce,0xfb,0x36,0x48,0xad,0xfb,0x36,0xf0,0x03,0x68,0x80,0xec,0x68,0x80,0xd4,0x98,0x4a,0x4a,0x1a,0x7a,0x80,0xcd,0x18,0xe0,0x0f,0xb0,06,0x9e,0xec,0x36,0xe8,0x80,0xf6,0x60]
importBytes.push 0xff while importBytes.size < 81

0.upto(importBytes.size-1) { |i| @romBytes[i+0x61ae] = importBytes[i] }

# 73AC
# link duplicate
importBytes = [0x20,0xae,0xbf,0x60]
importBytes.push 0xff while importBytes.size < 56

0.upto(importBytes.size-1) { |i| @romBytes[i+0xd5ac] = importBytes[i] }

# Break at 7281 -> 73e4 -> incorrect calculation, sum of items to determine position
# JSR 73B0
@romBytes[0xd5ee] = 0x20
@romBytes[0xd5ef] = 0xb0
@romBytes[0xd5f0] = 0x73

=begin
ADC $3726	;0x6d,0x26,0x37
CMP #$0d	;0xc9,0x0f
BCC	2		;0x90,0x02
LDA #$0c	;0xa9,0x0f
RTS			;0x60
=end

importBytes = [0x6d,0x26,0x37,0xc9,0x0e,0x90,0x02,0xa9,0x0e,0x60]
0.upto(importBytes.size-1) { |i| @romBytes[i+0xd5b0] = importBytes[i] }

# Remap custom placed password messages to standard ones
pwdOffsets = [0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12]
0.upto(pwdOffsets.size-1) { |i| @romBytes[i+0x039f10] = pwdOffsets[i] }

@romBytes[0x039684] = 0x8a
@romBytes[0x039685] = 0x50

@romBytes[0x0396ab] = 0x6e
@romBytes[0x0396ac] = 0x50

[0x039689,0x0396b0].each do |off|
	@romBytes[off] = 0x2c
	@romBytes[off+1] = 0x5d
	
	@romBytes[off+4] = 0x10
	@romBytes[off+5] = 0x5d
	
	@romBytes[off+16] = 0x1c
end

# Dirty hack for password screen extra chars
@romBytes[0x039170] = 0x00
@romBytes[0x039174] = 0x00
@romBytes[0x03917b] = 0x00

# Bring start/continue cursor higher (Y: 2677)
@romBytes[0x0384e7] = 0x0e
@romBytes[0x0383f5] = 0x0e
@romBytes[0x0383f9] = 0x0e
@romBytes[0x038407] = 0x10
@romBytes[0x038425] = 0x0e

# Shoddy password screen lines
pwdScrLines = encodeString("Your password isUse it to continue the game",0)
pwdScrXpos = [0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C]
pwdScrYpos = [0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F]
0.upto(pwdScrLines.size-1) { |i| @romBytes[i+0x039f50] = pwdScrLines[i] }
0.upto(pwdScrXpos.size-1) { |i| @romBytes[i+0x039f80] = pwdScrXpos[i] }
0.upto(pwdScrYpos.size-1) { |i| @romBytes[i+0x039fb0] = pwdScrYpos[i] }

@romBytes[0x03971b] = 0x50
@romBytes[0x03971c] = 0x5d

@romBytes[0x039720] = 0xb0
@romBytes[0x039721] = 0x5d

@romBytes[0x039724] = 0x80
@romBytes[0x039725] = 0x5d

@romBytes[0x039730] = 0x2b


IO.binwrite(@patchedROMPath, @romBytes.pack('c*'))

end_time = Time.now
puts "Done!"
puts "Running time: " + (end_time - start_time).to_s + " seconds."
